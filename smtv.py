#!/usr/bin/env python*
# -*- coding: UTF-8 -*-


import requests
import csv
import sys
import itertools
from pandas.io.json import json_normalize


def get_lgtm_project_data(repository_tail):
    # Get lgtm project level data given a repository URL tail like:
    # ('organization/repository_name')
    lgtm_projects_uri = 'https://lgtm.com/api/v1.0/projects/g/'
    r = requests.get(lgtm_projects_uri + repository_tail)
    if r.status_code == 200:
        return r.json()
    else:
        return 0


def get_lgtm_analysis(lgtm_project_id):
    # https://lgtm.com/api/v1.0/analyses/{project-id}/commits/{commit-id}
    lgtm_analyses_uri = 'https://lgtm.com/api/v1.0/analyses/'
    r = requests.get(lgtm_analyses_uri + str(lgtm_project_id) + '/commits/latest')
    if r.status_code == 200:
        return r.json()
    else:
        return 0


def flatten_json(y):
    out = {}

    def flatten(x, name=''):
        if type(x) is dict:
            for a in x:
                flatten(x[a], name + a + '_')
        elif type(x) is list:
            i = 0
            for a in x:
                flatten(a, name + str(i) + '_')
                i += 1
        else:
            out[name[:-1]] = x

    flatten(y)
    return out


def main():
    # For each repository longtail ('organization/repository_name') try to get # project analysis data from LGTM
    repository_list = ['pamplemouse9000/AI4Cyber-Team3', 'indiana-university/box-migration-tools']

    with open('lgtm.csv', 'w', newline='') as csvfile:
        fieldnames = ['id', 'url-identifier', 'name', 'url', 'languages_0_language', 'languages_0_status', 'languages_0_alerts', 'languages_0_lines', 'languages_0_commit-id', 'languages_0_commit-date', 'languages_0_analysis-date', 'languages_0_grade']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for repo in repository_list:
            lgtm_project_data = get_lgtm_project_data(repo)
            if lgtm_project_data != 0:
                # unpack dictionary, create new flat dictionary that is ready for csv writer
                flat = flatten_json(lgtm_project_data)
                writer.writerow(flat)


if __name__ == "__main__":
    # execute only if run as a script
    main()
    

